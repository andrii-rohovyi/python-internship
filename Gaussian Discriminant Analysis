import numpy as np

def GDA(X, y_train, X_test):
    n = X.shape[1]
    fi = np.sum(y_train) / len(y_train)
    m0 = ((X * (1 - y_train)) / np.sum(1 - y_train)).sum(axis = 0)
    m1 = (X * y_train / np.sum(y_train)).sum(axis = 0)
    sigma = np.zeros((n, n))
    X1 = (X - m0) * (1 - y_train) + (X - m1) * y_train
    for i in range(n):
        for j in range(n):
            sigma[i][j] = sum(X1[:, [i]]*X1[:, [j]]) / len(X1)
    p0 = N(X_test, m0 , sigma) * p(0, fi)
    p1 = N(X_test, m1 , sigma) * p(1, fi)
    return p1 > p0

def p(y_predictin, fi):
    return (fi ** y_predictin) * ((1 - fi) ** (1 - y_predictin))

def N(X, mu, sigma):
    return np.exp(- 0.5 * np.sum((X - mu).dot(np.linalg.pinv(sigma)) * (X - mu), axis = 1)) / (((2 * np.pi) ** (len(sigma) / 2)) * (np.linalg.det(sigma) ** 0.5))
