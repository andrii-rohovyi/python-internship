import numpy as np
def Logistic(X, y, theta, l):
    m = len(y)
    return ((1 / m) * np.sum( - y * np.log(sigmoid(X.dot(theta))) - (1 - y) * np.log(1 - sigmoid(X.dot(theta))))) + l * np.sum(theta[1:len(theta)] ** 2) / (2 * m) , \
    X.conj().T.dot(sigmoid(X.dot(theta)) - y) / m + l * np.concatenate((np.array([[0]]),theta[1:len(theta)])) / m   #cost function, gradient
def sigmoid(z): 
    return 1 / (1 + np.exp(-z) )
